🔥 Enable SSL (HTTPS) using Cert-Manager & Let’s Encrypt & Configure Jenkins for Auto-Deployment

To ensure secure access (HTTPS) to our Jenkins Demo App, we will:
✅ Install Cert-Manager (Handles SSL certificates)
✅ Use Let’s Encrypt (Free SSL provider)
✅ Modify Ingress for HTTPS
✅ Update Jenkins to deploy automatically after a successful build
1️⃣ Enable SSL with Cert-Manager & Let’s Encrypt
📌 What is Cert-Manager?

    Automates SSL certificate management in Kubernetes.
    Works with Let’s Encrypt for free SSL.

🚀 Step 1: Install Cert-Manager

Run:

kubectl apply -f https://github.com/jetstack/cert-manager/releases/latest/download/cert-manager.yaml

Verify installation:

kubectl get pods -n cert-manager

If all pods are Running, proceed.
🚀 Step 2: Create a ClusterIssuer (Let’s Encrypt)

Create cluster-issuer.yaml:

apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: your-email@example.com # Replace with your email
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx

Apply:

kubectl apply -f cluster-issuer.yaml

🚀 Step 3: Modify Ingress for HTTPS

Update ingress.yaml:

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jenkins-demo-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - demo.yourdomain.com  # Replace with your domain
    secretName: demo-tls  # This stores the SSL certificate
  rules:
  - host: demo.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 5000

Apply:

kubectl apply -f ingress.yaml

Verify the SSL certificate:

kubectl get certificates
kubectl describe certificate demo-tls

✅ Now Your App is Secured with HTTPS

    Access your app at https://demo.yourdomain.com
    Auto-renewal is handled by Cert-Manager.

2️⃣ Configure Jenkins for Auto-Deployment

Now, we will update Jenkins to automatically deploy when new code is pushed.
🚀 Step 1: Update Jenkinsfile

Modify your Jenkinsfile:

pipeline {
    agent any

    environment {
        REGISTRY = "your-dockerhub-username"
        BACKEND_IMAGE = "jenkins-demo-backend"
        FRONTEND_IMAGE = "jenkins-demo-frontend"
        TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git 'https://github.com/your-username/jenkins-demo.git'
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build Backend') {
                    steps {
                        sh 'docker build -t $REGISTRY/$BACKEND_IMAGE:$TAG ./backend'
                    }
                }
                stage('Build Frontend') {
                    steps {
                        sh 'docker build -t $REGISTRY/$FRONTEND_IMAGE:$TAG ./frontend'
                    }
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                withDockerRegistry([credentialsId: 'dockerhub-credentials', url: '']) {
                    sh 'docker push $REGISTRY/$BACKEND_IMAGE:$TAG'
                    sh 'docker push $REGISTRY/$FRONTEND_IMAGE:$TAG'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh 'kubectl set image deployment/backend backend=$REGISTRY/$BACKEND_IMAGE:$TAG'
                sh 'kubectl set image deployment/frontend frontend=$REGISTRY/$FRONTEND_IMAGE:$TAG'
                sh 'kubectl rollout status deployment/backend'
                sh 'kubectl rollout status deployment/frontend'
            }
        }
    }

    post {
        success {
            slackSend (
                channel: "#devops-ci",
                color: "good",
                message: "✅ SUCCESS: Jenkins Deployment Complete for ${env.JOB_NAME} [${env.BUILD_NUMBER}] 🎉"
            )
        }
        failure {
            slackSend (
                channel: "#devops-ci",
                color: "danger",
                message: "❌ FAILURE: Jenkins Deployment Failed for ${env.JOB_NAME} [${env.BUILD_NUMBER}] 🚨"
            )
        }
    }
}

🚀 Step 2: Add Webhook for Auto-Trigger

    Go to GitHub → Repository Settings → Webhooks.
    Click "Add Webhook".
    Payload URL:

    http://your-jenkins-url/github-webhook/

    Content Type: application/json
    Triggers: Just the push event
    Save

Now, Jenkins will automatically build and deploy on every new GitHub push.
🚀 Step 3: Grant Jenkins Access to Kubernetes

Run this on your Kubernetes cluster to allow Jenkins to deploy:

kubectl create serviceaccount jenkins
kubectl create clusterrolebinding jenkins-admin --clusterrole=cluster-admin --serviceaccount=default:jenkins

Get the token:

kubectl get secret $(kubectl get sa jenkins -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode

Copy the token and add it to Jenkins under:

    Manage Jenkins → Manage Credentials → Kubernetes Token.

✅ Final Steps

    Test HTTPS

curl -k https://demo.yourdomain.com

Push a GitHub change and verify Jenkins auto-deploys.
Check the deployment logs:

    kubectl get pods
    kubectl get hpa
    kubectl get ingress

🎯 Summary

✅ Cert-Manager & Let’s Encrypt enabled HTTPS
✅ Ingress routes traffic securely
✅ Jenkins now auto-deploys on GitHub push
✅ Slack notifications alert on success/failure
