ðŸ”¹ Step 1: Set Up Auto-Scaling in Kubernetes

Kubernetes provides Horizontal Pod Autoscaler (HPA) to automatically scale pods based on CPU or memory usage.
ðŸ“Œ 1.1 Deploy Metrics Server

HPA requires the Metrics Server to gather CPU and memory metrics.

Apply the Metrics Server:

kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

ðŸ“Œ 1.2 Create HPA for Auto-Scaling

Modify k8s/hpa.yaml:

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: github-actions-demo-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: github-actions-demo
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50

    Min Replicas: 2
    Max Replicas: 10
    Target CPU Utilization: 50%

ðŸ“Œ 1.3 Update GitHub Actions to Deploy HPA

Modify .github/workflows/ci-cd.yml:

  deploy-hpa:
    runs-on: ubuntu-latest
    needs: deploy-to-k8s
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy HPA
        run: kubectl --kubeconfig=kubeconfig.yml apply -f k8s/hpa.yaml

ðŸ”¹ Step 2: Use Istio for Traffic Routing
ðŸ“Œ 2.1 Install Istio

curl -L https://istio.io/downloadIstio | sh -
cd istio-*
export PATH=$PWD/bin:$PATH
istioctl install --set profile=demo -y

ðŸ“Œ 2.2 Label the Namespace for Istio Injection

kubectl label namespace default istio-injection=enabled

ðŸ“Œ 2.3 Create Istio Gateway and VirtualService

Modify k8s/istio.yaml:

apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: github-actions-demo-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: github-actions-demo-vs
spec:
  hosts:
    - "*"
  gateways:
    - github-actions-demo-gateway
  http:
    - match:
        - uri:
            prefix: "/"
      route:
        - destination:
            host: github-actions-demo
            port:
              number: 3000

ðŸ“Œ 2.4 Update GitHub Actions to Deploy Istio

Modify .github/workflows/ci-cd.yml:

  deploy-istio:
    runs-on: ubuntu-latest
    needs: deploy-to-k8s
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy Istio Gateway
        run: kubectl --kubeconfig=kubeconfig.yml apply -f k8s/istio.yaml

ðŸ”¹ Step 3: Implement RBAC for Fine-Grained Permissions

Role-Based Access Control (RBAC) ensures secure access to Kubernetes resources.
ðŸ“Œ 3.1 Create an RBAC Role

Modify k8s/rbac.yaml:

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: devops-role
rules:
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: devops-role-binding
  namespace: default
subjects:
  - kind: User
    name: devops-user
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: devops-role
  apiGroup: rbac.authorization.k8s.io

    Grants "devops-user" permission to list, watch, and get pods and services.

ðŸ“Œ 3.2 Update GitHub Actions to Apply RBAC

Modify .github/workflows/ci-cd.yml:

  apply-rbac:
    runs-on: ubuntu-latest
    needs: deploy-to-k8s
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Apply RBAC Policies
        run: kubectl --kubeconfig=kubeconfig.yml apply -f k8s/rbac.yaml

ðŸš€ Final GitHub Actions Workflow
Job	Purpose
build-and-test	Runs tests for the app
build-and-push-docker	Builds and pushes Docker image
provision-infra	Creates Kubernetes cluster using Terraform
setup-iam	Configures IAM role for Kubernetes
deploy-to-k8s	Deploys the app to Kubernetes
deploy-hpa	Implements auto-scaling with HPA
deploy-istio	Routes traffic using Istio
apply-rbac	Secures access with RBAC
notify-slack	Sends status notifications to Slack
ðŸ”¥ Next Steps

    Set up Kubernetes Network Policies for security.
    Add Secrets Management with HashiCorp Vault.
    Implement Canary Deployments with Istio.
