ðŸ”¹ Step 1: Set Up Service Mesh with Linkerd

Linkerd provides a lightweight service mesh for observability, security, and traffic control in Kubernetes.
ðŸ“Œ 1.1 Install Linkerd

curl -sL run.linkerd.io/install | sh
export PATH=$HOME/.linkerd2/bin:$PATH
linkerd check --pre

ðŸ“Œ 1.2 Deploy Linkerd to Kubernetes

linkerd install | kubectl apply -f -

Verify installation:

linkerd check

ðŸ“Œ 1.3 Inject Linkerd into Application

Modify k8s/deployment.yaml:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: github-actions-demo
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: github-actions-demo
      annotations:
        linkerd.io/inject: enabled
    spec:
      containers:
        - name: app
          image: your-dockerhub-username/github-actions-demo:latest

ðŸ“Œ 1.4 Deploy Linkerd Dashboard

linkerd viz install | kubectl apply -f -

Access the dashboard:

linkerd viz dashboard

ðŸ“Œ 1.5 Update GitHub Actions for Linkerd

Modify .github/workflows/ci-cd.yml:

  deploy-linkerd:
    runs-on: ubuntu-latest
    needs: deploy-to-k8s
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Install Linkerd
        run: |
          linkerd install | kubectl apply -f -
          linkerd viz install | kubectl apply -f -

ðŸ”¹ Step 2: Implement Kubernetes Resource Quotas

Resource quotas prevent resource exhaustion by limiting CPU, memory, and storage usage.
ðŸ“Œ 2.1 Create a Resource Quota

Modify k8s/resource-quota.yaml:

apiVersion: v1
kind: ResourceQuota
metadata:
  name: namespace-quota
  namespace: default
spec:
  hard:
    requests.cpu: "2"
    requests.memory: "2Gi"
    limits.cpu: "4"
    limits.memory: "4Gi"
    pods: "10"

ðŸ”¹ Explanation:

    Limits CPU usage to 4 cores and memory to 4GB.
    Restricts to 10 pods max.

ðŸ“Œ 2.2 Apply Resource Quota

kubectl apply -f k8s/resource-quota.yaml

ðŸ“Œ 2.3 Update GitHub Actions for Resource Quotas

Modify .github/workflows/ci-cd.yml:

  apply-resource-quota:
    runs-on: ubuntu-latest
    needs: deploy-to-k8s
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Apply Resource Quotas
        run: kubectl --kubeconfig=kubeconfig.yml apply -f k8s/resource-quota.yaml

ðŸ”¹ Step 3: Configure Multi-Cluster Kubernetes Federation

Federation enables multiple clusters to act as one, improving availability.
ðŸ“Œ 3.1 Install kubefed for Federation

kubectl apply -f https://github.com/kubernetes-sigs/kubefed/releases/download/v0.8.1/kubefed.yaml

ðŸ“Œ 3.2 Register Clusters for Federation

Modify k8s/federation.yaml:

apiVersion: core.kubefed.io/v1beta1
kind: KubeFedCluster
metadata:
  name: cluster-1
  namespace: kube-federation-system
spec:
  apiEndpoint: "https://your-cluster-1-api-server"
---
apiVersion: core.kubefed.io/v1beta1
kind: KubeFedCluster
metadata:
  name: cluster-2
  namespace: kube-federation-system
spec:
  apiEndpoint: "https://your-cluster-2-api-server"

ðŸ“Œ 3.3 Deploy Federated Application

Modify k8s/federated-app.yaml:

apiVersion: types.kubefed.io/v1beta1
kind: FederatedDeployment
metadata:
  name: github-actions-demo
  namespace: default
spec:
  template:
    spec:
      replicas: 2
      selector:
        matchLabels:
          app: github-actions-demo
      template:
        metadata:
          labels:
            app: github-actions-demo
        spec:
          containers:
            - name: app
              image: your-dockerhub-username/github-actions-demo:latest
              ports:
                - containerPort: 3000
  placement:
    clusters:
      - name: cluster-1
      - name: cluster-2

ðŸ”¹ Explanation:

    Deploys the app across multiple clusters.
    Ensures redundancy and high availability.

ðŸ“Œ 3.4 Update GitHub Actions for Federation

Modify .github/workflows/ci-cd.yml:

  setup-federation:
    runs-on: ubuntu-latest
    needs: deploy-to-k8s
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Install KubeFed
        run: kubectl apply -f https://github.com/kubernetes-sigs/kubefed/releases/download/v0.8.1/kubefed.yaml

      - name: Register Clusters
        run: kubectl apply -f k8s/federation.yaml

      - name: Deploy Federated Application
        run: kubectl apply -f k8s/federated-app.yaml

ðŸš€ Final GitHub Actions Workflow
Job	Purpose
build-and-test	Runs tests for the app
build-and-push-docker	Builds and pushes Docker image
provision-infra	Creates Kubernetes cluster using Terraform
setup-iam	Configures IAM role for Kubernetes
deploy-linkerd	Deploys Linkerd for service mesh
apply-resource-quota	Implements Kubernetes Resource Quotas
setup-federation	Configures Multi-Cluster Federation
notify-slack	Sends status notifications to Slack
ðŸ”¥ Next Steps

    Implement Kubernetes Backup and Disaster Recovery.
    Automate Security Scanning with Trivy.
    Set up Kubernetes Cost Optimization with KubeCost.
