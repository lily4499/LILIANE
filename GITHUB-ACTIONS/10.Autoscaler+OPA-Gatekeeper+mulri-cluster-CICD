ðŸ”¹ Step 1: Set Up Kubernetes Autoscaler for Cost Optimization

Kubernetes Cluster Autoscaler automatically adjusts the number of nodes in your cluster based on demand, helping optimize costs.
ðŸ“Œ 1.1 Deploy Cluster Autoscaler

Modify k8s/cluster-autoscaler.yaml:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-autoscaler
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cluster-autoscaler
  template:
    metadata:
      labels:
        app: cluster-autoscaler
    spec:
      containers:
        - name: cluster-autoscaler
          image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.27.0
          command:
            - ./cluster-autoscaler
            - --v=4
            - --stderrthreshold=info
            - --cloud-provider=aws
            - --skip-nodes-with-local-storage=false
            - --expander=least-waste
          env:
            - name: AWS_REGION
              value: "us-east-1"

ðŸ”¹ Explanation:

    Uses AWS Cluster Autoscaler to scale nodes based on workload.
    expander=least-waste: Adds nodes that minimize resource waste.

ðŸ“Œ 1.2 Update GitHub Actions for Autoscaler

Modify .github/workflows/ci-cd.yml:

  deploy-cluster-autoscaler:
    runs-on: ubuntu-latest
    needs: deploy-to-k8s
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy Cluster Autoscaler
        run: kubectl --kubeconfig=kubeconfig.yml apply -f k8s/cluster-autoscaler.yaml

ðŸ”¹ Step 2: Implement Advanced Policy Enforcement with OPA Gatekeeper

OPA Gatekeeper enforces security policies and best practices in Kubernetes.
ðŸ“Œ 2.1 Install OPA Gatekeeper

kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml

ðŸ“Œ 2.2 Define a Policy (Example: Restrict Privileged Containers)

Modify k8s/opa-policy.yaml:

apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPSPPrivilegedContainer
metadata:
  name: deny-privileged-containers
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
  parameters:
    allowPrivilegedContainers: false

ðŸ”¹ Explanation:

    Blocks pods that try to run as privileged containers.

ðŸ“Œ 2.3 Apply the Policy

kubectl apply -f k8s/opa-policy.yaml

ðŸ“Œ 2.4 Update GitHub Actions for OPA Gatekeeper

Modify .github/workflows/ci-cd.yml:

  enforce-opa-policies:
    runs-on: ubuntu-latest
    needs: deploy-to-k8s
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy OPA Gatekeeper
        run: kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml

      - name: Apply OPA Policies
        run: kubectl --kubeconfig=kubeconfig.yml apply -f k8s/opa-policy.yaml

ðŸ”¹ Step 3: Configure Multi-Cluster Kubernetes CI/CD Pipelines

Multi-cluster CI/CD helps deploy applications across multiple Kubernetes clusters.
ðŸ“Œ 3.1 Create Multi-Cluster Contexts

kubectl config set-context cluster-1 --cluster=kubernetes --user=kubernetes-admin
kubectl config set-context cluster-2 --cluster=kubernetes --user=kubernetes-admin

ðŸ“Œ 3.2 Deploy an Application to Multiple Clusters

Modify k8s/multi-cluster-app.yaml:

apiVersion: types.kubefed.io/v1beta1
kind: FederatedDeployment
metadata:
  name: github-actions-demo
  namespace: default
spec:
  template:
    spec:
      replicas: 2
      selector:
        matchLabels:
          app: github-actions-demo
      template:
        metadata:
          labels:
            app: github-actions-demo
        spec:
          containers:
            - name: app
              image: your-dockerhub-username/github-actions-demo:latest
              ports:
                - containerPort: 3000
  placement:
    clusters:
      - name: cluster-1
      - name: cluster-2

ðŸ“Œ 3.3 Update GitHub Actions for Multi-Cluster CI/CD

Modify .github/workflows/ci-cd.yml:

  deploy-multi-cluster:
    runs-on: ubuntu-latest
    needs: deploy-to-k8s
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Multi-Cluster Contexts
        run: |
          kubectl config set-context cluster-1 --cluster=kubernetes --user=kubernetes-admin
          kubectl config set-context cluster-2 --cluster=kubernetes --user=kubernetes-admin

      - name: Deploy Application to Multiple Clusters
        run: kubectl --kubeconfig=kubeconfig.yml apply -f k8s/multi-cluster-app.yaml

ðŸš€ Final GitHub Actions Workflow
Job	Purpose
build-and-test	Runs tests for the app
build-and-push-docker	Builds and pushes Docker image
provision-infra	Creates Kubernetes cluster using Terraform
setup-iam	Configures IAM role for Kubernetes
deploy-cluster-autoscaler	Implements Cluster Autoscaler for cost optimization
enforce-opa-policies	Applies security policies using OPA Gatekeeper
deploy-multi-cluster	Deploys app across multiple Kubernetes clusters
notify-slack	Sends status notifications to Slack
ðŸ”¥ Next Steps

    Implement Machine Learning Workloads on Kubernetes.
    Configure Serverless Deployments with Knative.
    Optimize Kubernetes Performance with Cilium for Networking.
